<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue八股文</title>
      <link href="/2024/08/28/Vue%E5%85%AB%E8%82%A1%E6%96%87/"/>
      <url>/2024/08/28/Vue%E5%85%AB%E8%82%A1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue八股"><a href="#Vue八股" class="headerlink" title="Vue八股"></a>Vue八股</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React技术应用题</title>
      <link href="/2024/08/25/React%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8%E9%A2%98/"/>
      <url>/2024/08/25/React%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="React技术应用题"><a href="#React技术应用题" class="headerlink" title="React技术应用题"></a>React技术应用题</h1><h2 id="1-React是什么？解释React的核心概念"><a href="#1-React是什么？解释React的核心概念" class="headerlink" title="1. React是什么？解释React的核心概念"></a>1. React是什么？解释React的核心概念</h2><p>React是一个用于<strong>构建用户界面</strong>的<strong>JavaScript库</strong>，以<strong>组件化</strong>的方式使前端开发更加<strong>模块化和可复用</strong>。</p><blockquote><p>React 是由 Facebook 开发的前端库，主要用于构建用户界面。它的核心理念是<strong>组件化开发，这意味着你可以将复杂的 UI 拆分成小的、独立的、可重用的组件。</strong>每个组件都有自己的逻辑和渲染方式，这种模块化的方法使得代码更易于维护和测试。</p></blockquote><p>React 的组件可以是函数组件或类组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个组件可以在应用的不同部分重复使用，体现了 React 的可复用性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Welcome</span> name=<span class="string">&quot;Alice&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Bob&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="2-React生命周期有哪些阶段？描述React类组件和函数组件的生命周期。"><a href="#2-React生命周期有哪些阶段？描述React类组件和函数组件的生命周期。" class="headerlink" title="2. React生命周期有哪些阶段？描述React类组件和函数组件的生命周期。"></a>2. React生命周期有哪些阶段？描述React类组件和函数组件的生命周期。</h2><p>生命周期包括挂载（Mounting)、更新（Updating）、卸载（Unmounting)阶段，类组件有更多细分。</p><blockquote><p>React 组件的生命周期描述了组件从创建到销毁的整个过程。对于类组件，生命周期方法更为详细：</p><ol><li>挂载阶段：constructor() → render() → componentDidMount()</li><li>更新阶段：shouldComponentUpdate() → render() → componentDidUpdate()</li><li>卸载阶段：componentWillUnmount()</li></ol></blockquote><p>函数组件使用Hooks来模拟生命周期行为</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 相当于 componentDidMount 和 componentDidUpdate</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 相当于 componentWillUnmount</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [dependencies]);</span><br></pre></td></tr></table></figure><h2 id="3-什么是JSX-解释JSX的作用和它在React中的使用方式。"><a href="#3-什么是JSX-解释JSX的作用和它在React中的使用方式。" class="headerlink" title="3. 什么是JSX?解释JSX的作用和它在React中的使用方式。"></a>3. 什么是JSX?解释JSX的作用和它在React中的使用方式。</h2><p>JSX是JavaScript的语法扩展，允许你在JavaScript中写类似HTML 的语法</p><p>JSX 是 React 中用于描述 UI 的语法糖。它允许你在 JavaScript 文件中编写类似 HTML 的代码。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>JSX不是纯HTML，它可以包含JavaScript的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>在编译时，JSX会被转换为React.createElement()调用，因此上面的代码等同于：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello, &#x27;</span>, name);</span><br></pre></td></tr></table></figure><h2 id="4-React中的虚拟DOM是什么？描述虚拟DOM的工作原理和它对性能的影响。"><a href="#4-React中的虚拟DOM是什么？描述虚拟DOM的工作原理和它对性能的影响。" class="headerlink" title="4. React中的虚拟DOM是什么？描述虚拟DOM的工作原理和它对性能的影响。"></a>4. React中的虚拟DOM是什么？描述虚拟DOM的工作原理和它对性能的影响。</h2><p>虚拟DOM是一个轻量级的DOM树，用于提高性能，通过比较新旧树来最小化实际DOM的更改。</p><blockquote><p>虚拟 DOM 是 React 性能优化的核心机制。它是内存中的 JavaScript 对象，代表了真实 DOM 的结构。当组件状态发生变化时，React 首先在虚拟 DOM 中进行更新，然后通过<strong>差异算法（Diffing）</strong>比较新旧虚拟 DOM 树的差异。最后，React 只将必要的更改应用到实际 DOM 上。</p><p><strong>这种方法显著减少了直接操作 DOM 的次数</strong>，因为 DOM 操作通常是昂贵的。虚拟 DOM 的使用使得 React 能够批量处理更新，从而提高了渲染效率，尤其是在处理大量数据或频繁更新的场景中。</p></blockquote><h2 id="5-什么是组件的props和state-解释它们的区别和用途"><a href="#5-什么是组件的props和state-解释它们的区别和用途" class="headerlink" title="5. 什么是组件的props和state?解释它们的区别和用途"></a>5. 什么是组件的props和state?解释它们的区别和用途</h2><p>props是<strong>组件的输入，不可变</strong>；state是组件的<strong>内部数据，可变</strong></p><p>Props:</p><ul><li>是从父组件传递给子组件的数据。</li><li>是只读的，子组件不能直接修改接收到的 props。</li><li>用于组件间的数据传递和通信。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Welcome</span> name=<span class="string">&quot;Alice&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>State:</p><ul><li>是组件内部管理的可变数据。</li><li>可以通过 setState()（类组件）或 useState Hook（函数组件）进行更新。</li><li>状态的变化会触发组件的重新渲染。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-React中的setState是同步还是异步的？解释setState的行为和使用时的注意事项"><a href="#6-React中的setState是同步还是异步的？解释setState的行为和使用时的注意事项" class="headerlink" title="6. React中的setState是同步还是异步的？解释setState的行为和使用时的注意事项"></a>6. React中的setState是同步还是异步的？解释setState的行为和使用时的注意事项</h2><p>setState<strong>异步更新</strong>组件状态，避免直接修改。</p><blockquote><p>setState 在 React 中通常是异步的。这意味着当你调用 setState 后，state 不会立即更新。这种设计是为了优化性能，允许 React 批量处理多个状态更新。</p></blockquote><ol><li><p>不要依赖前一个setState的结果来计算下一个状态：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的方式</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line"><span class="comment">// 最终 count 可能只会增加 1，而不是 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的方式</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123; <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span> &#125;));</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123; <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span> &#125;));</span><br><span class="line"><span class="comment">// 这样 count 会正确地增加 2</span></span><br></pre></td></tr></table></figure></li><li><p>setState的第二个参数是一个回调函数，会在状态更新完成后执行</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123; count: <span class="built_in">this</span>.state.count + <span class="number">1</span> &#125;, () =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;State has been updated!&#x27;</span>);</span><br><span class="line">  <span class="comment">// 这里可以安全地使用更新后的 state</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在某些情况下（如原生事件处理器中），setState 可能表现得像同步操作，但不应依赖这种行为。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 这里可能会立即看到更新后的值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-如何避免在-React-中的不必要的渲染？-讨论-shouldComponentUpdate-、-React-memo-、-useMemo-和-useCallback-。"><a href="#7-如何避免在-React-中的不必要的渲染？-讨论-shouldComponentUpdate-、-React-memo-、-useMemo-和-useCallback-。" class="headerlink" title="7. 如何避免在 React 中的不必要的渲染？ 讨论 shouldComponentUpdate 、 React.memo 、 useMemo 和 useCallback 。"></a>7. 如何避免在 React 中的不必要的渲染？ 讨论 shouldComponentUpdate 、 React.memo 、 useMemo 和 useCallback 。</h2><p>避免不必要的，通过 React.memo、useMemo 和 useCallback <strong>缓存值和函数。</strong></p><blockquote><p>在 React 中，有时组件会在不必要的情况下重新渲染，这可能会影响应用的性能。</p></blockquote><ol><li><p>React.memo:<br>这是一个高阶组件，用于函数组件。它会对比props，如果props没有变化，就不会重新渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// 组件逻辑</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>useMemo:<br>这个Hook用于缓存计算结果。只有当依赖项改变时，才会重新计算。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">computeExpensiveValue</span>(a, b), [a, b]);</span><br></pre></td></tr></table></figure></li><li><p>useCallback:<br>这个Hook用于缓存函数。它在依赖项不变的情况下，返回相同的函数引用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">doSomething</span>(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-React-Hooks有哪些？"><a href="#8-React-Hooks有哪些？" class="headerlink" title="8. React Hooks有哪些？"></a>8. React Hooks有哪些？</h2><p>包括状态，副作用，上下文等，用于函数组件当中</p><p>【【前端面试题】为什么要有Hooks，ReactHooks优缺点（字节跳动前端一面）】 <a href="https://www.bilibili.com/video/BV1Rw411v7dz/?share_source=copy_web&vd_source=c5226b5623222d58d700acb3cd12a496">https://www.bilibili.com/video/BV1Rw411v7dz/?share_source=copy_web&amp;vd_source=c5226b5623222d58d700acb3cd12a496</a></p><blockquote><p>16.8之前用的是class模式组件，也就是我们说的类组件。现在更多写函数式组件，一切都是函数。</p><p>优点有？</p><p>class组件逻辑代码比较难复用。只能通过HOC（高阶组件）或者render props。需要我们改写组件来使用这些模式，而且会增加层级组件，可能会导致嵌套地域。</p><p>但是Hooks可以让我们在不用修改组件逻辑的情况下，达到复用。</p><p>同一个声明周期中的逻辑一般互不相关，而相关联的逻辑却放在不同的生命周期里面。（像Vue2的选项式API)。useEffect可以让我们把相互关联的逻辑写到一起，便于维护.</p></blockquote><h2 id="9-什么是Context-API？-描述如何在组件树中传递数据而不使用Props"><a href="#9-什么是Context-API？-描述如何在组件树中传递数据而不使用Props" class="headerlink" title="9. 什么是Context API？ 描述如何在组件树中传递数据而不使用Props"></a>9. 什么是Context API？ 描述如何在组件树中传递数据而不使用Props</h2><p>Context API允许跨组件树传递数据，避免prop drilling。</p><blockquote><p>Context API 是 React 提供的一种在<strong>组件树中共享数据的方法</strong>，无需显式地通过每一层组件传递 props。这对于全局数据（如主题、用户认证状态等）特别有用。</p></blockquote><ol><li><p>创建 Context:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const MyContext = React.createContext(defaultValue);</span><br></pre></td></tr></table></figure></li><li><p>提供 Context:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyContext.Provider value=&#123;/* 某个值 */&#125;&gt;</span><br><span class="line">  &#123;/* 子组件 */&#125;</span><br><span class="line">&lt;/MyContext.Provider&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 Context:<br>在函数组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const value = useContext(MyContext);</span><br></pre></td></tr></table></figure><p>在类组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static contextType = MyContext;</span><br><span class="line">// 然后可以通过 this.context 访问</span><br></pre></td></tr></table></figure></li></ol><h2 id="10-如何实现条件渲染？-讨论JSX中使用条件逻辑的方法"><a href="#10-如何实现条件渲染？-讨论JSX中使用条件逻辑的方法" class="headerlink" title="10. 如何实现条件渲染？ 讨论JSX中使用条件逻辑的方法"></a>10. 如何实现条件渲染？ 讨论JSX中使用条件逻辑的方法</h2><p>条件渲染 使用三元运算符或&amp;&amp;操作符在JSX中根据条件渲染元素</p><blockquote><p>条件渲染是根据特定条件决定渲染哪些组件或元素的技术。在 React 中，我们有多种方法实现条件渲染</p></blockquote><ol><li><p>使用 if 语句：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentA</span> /&gt;</span></span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentB</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用三元运算符：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> condition ? <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentA</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentB</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>使用逻辑与运算符（&amp;&amp;）：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> condition &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>使用变量存储元素：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> component;</span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  component = <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentA</span> /&gt;</span></span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  component = <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentB</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;component&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="11-React-Router是什么？描述如何在React应用中的作用。"><a href="#11-React-Router是什么？描述如何在React应用中的作用。" class="headerlink" title="11. React Router是什么？描述如何在React应用中的作用。"></a>11. React Router是什么？描述如何在React应用中的作用。</h2><p>React Router管理应用路由，实现单页面应用的页面跳转。</p><blockquote><p>React Router 是 React 生态系统中最流行的路由库之一。它允许您在<strong>单页面应用(SPA)中创建动态路由</strong>,使得用户可以在<strong>不同的页面间导航,而无需重新加载整个页面。</strong></p></blockquote><p>【07课 React router】 <a href="https://www.bilibili.com/video/BV1iDWfejEzB/?share_source=copy_web&vd_source=c5226b5623222d58d700acb3cd12a496">https://www.bilibili.com/video/BV1iDWfejEzB/?share_source=copy_web&amp;vd_source=c5226b5623222d58d700acb3cd12a496</a></p><p><img src="/./../2024/image-20240828212807600.png" alt="image-20240828212807600"></p><p>看对应的router是什么？如果匹配了渲染对应的component出来。</p><blockquote><p>三种渲染方式</p><p>children &gt; component &gt; render 并且三者是互斥的</p><p><img src="/./../2024/image-20240828214335275.png" alt="image-20240828214335275"></p><ol><li><p>children: func</p><p>有时候不管location是否匹配你都要渲染一些内容，这时候你可以用children。</p><p>除了不管location是否匹配都会被渲染之外，其他工作方法与render完全一样。</p></li><li><p>reder:func</p><p>但是当你用render的时候，你调用的只是个函数</p></li><li><p>component:component</p><p>只在当location匹配的时候渲染</p></li></ol></blockquote><blockquote><p>404页面设置</p><p><img src="/./../2024/image-20240828214728405.png" alt="image-20240828214728405"></p></blockquote><h2 id="12-什么是Redux？-解释Redux的概念和它在React应用中的作用"><a href="#12-什么是Redux？-解释Redux的概念和它在React应用中的作用" class="headerlink" title="12. 什么是Redux？ 解释Redux的概念和它在React应用中的作用"></a>12. 什么是Redux？ 解释Redux的概念和它在React应用中的作用</h2><p>Redux是状态管理库，集中管理应用状态，通过纯函数进行状态更新。</p><blockquote><p>Redux 的核心概念:</p><ol><li>Store: 保存整个应用的状态树的对象。</li><li>Action: 描述发生了什么的普通 JavaScript 对象。</li><li>Reducer: 指定应用状态如何变化的纯函数。接收先前的状态和一个 action,返回新的状态。</li><li>Dispatch: 将 action 发送到 store 的方法。</li></ol><p>Redux 在 React 应用中的作用:</p><ol><li>集中状态管理: Redux 提供一个集中的地方来存储应用的所有状态,使状态管理更加可控。</li><li>可预测性: 通过使用纯函数(reducers)来更新状态,Redux 使状态变化变得可预测。</li><li>调试便利: Redux DevTools 允许你轻松地检查每个状态变化。</li><li>中间件支持: Redux 的中间件机制允许你扩展其功能,如处理异步操作。</li></ol></blockquote><h2 id="13-React中的高阶组件和Hooks有什么区别？讨论它们的使用场景和优缺点"><a href="#13-React中的高阶组件和Hooks有什么区别？讨论它们的使用场景和优缺点" class="headerlink" title="13. React中的高阶组件和Hooks有什么区别？讨论它们的使用场景和优缺点"></a>13. React中的高阶组件和Hooks有什么区别？讨论它们的使用场景和优缺点</h2><p>HOC vs Hooks：HOC 用于逻辑复用，Hooks 提供了函数组件的逻辑复用和状态管</p><blockquote><ul><li>HOC：参数是组件，返回值也是组件的函数<br> 优点：可以包装任何类型的组件<br> 缺点：可能导致组件层级嵌套过深</li><li>Hooks：<br> 优点：使用简单，不增加组件层级<br> 缺点：只能在函数组件中使用</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24道基础八股</title>
      <link href="/2024/08/24/24%E9%81%93%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1/"/>
      <url>/2024/08/24/24%E9%81%93%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="24道基础八股"><a href="#24道基础八股" class="headerlink" title="24道基础八股"></a>24道基础八股</h1><h2 id="1-解释JavaScript是什么？主要用途是什么"><a href="#1-解释JavaScript是什么？主要用途是什么" class="headerlink" title="1. 解释JavaScript是什么？主要用途是什么?"></a>1. 解释JavaScript是什么？主要用途是什么?</h2><p>JavaScript是一种<strong>高级的、解释型的</strong>语言，主要用于创建<strong>交互式</strong>的网页。他的主要用途包括在网页上添加动态交互效果，处理表单验证、创建复杂的单页应用（SPA）等。</p><ol><li>高级解释型语言：这意味着JavaScript代码<strong>不需要编译</strong>，可以直接在浏览器中解释执行。这使得开发和调试过程更加快速和灵活。</li><li>动态交互效果：例如，当用户点击按钮时改变页面内容，或者实现拖拽功能等。这些效果可以大大提升用户体验。</li><li>表单验证：在用户提交表单之前，JavaScript<strong>可以检查输入</strong>是否符合要求，如邮箱格式是否正确，密码是否足够强等。这可以减少服务器端的压力，提高响应速度。</li><li>单页应用（SPA）：这是一种现代web应用架构，<strong>整个应用只有一个HTML页面</strong>，通过JavaScript动态更新内容。这种方式可以提供类似于桌面应用的用户体验。</li><li>其他用途：JavaScript还可以用于<strong>服务器端编程（如Node.js）</strong>，移动应用开发，游戏开发等。</li></ol><h2 id="2-JavaScript中有哪些基本数据类型"><a href="#2-JavaScript中有哪些基本数据类型" class="headerlink" title="2. JavaScript中有哪些基本数据类型"></a>2. JavaScript中有哪些基本数据类型</h2><p>Number, String, Boolean, Null, Undefined, Symbol以及BigInt。</p><ol><li>Number：表示整数和浮点数。例如：let age &#x3D; 25; let price &#x3D; 19.99;</li><li>String：表示文本数据。例如：let name &#x3D; “John Doe”;</li><li>Boolean：表示true或false。例如：let isLoggedIn &#x3D; true;</li><li>Null：表示一个故意的空值。例如：let emptyValue &#x3D; null;</li><li>Undefined：表示一个未定义的值。例如：let notAssigned;</li><li>Symbol：表示一个唯一的标识符。例如：let id &#x3D; Symbol(“id”);</li><li>BigInt：用于表示大于2^53 - 1的整数。例如：let bigNumber &#x3D; 1234567890123456789012345678901234567890n;</li></ol><h2 id="3-Null和Undefined在JavaScript中有什么区别"><a href="#3-Null和Undefined在JavaScript中有什么区别" class="headerlink" title="3. Null和Undefined在JavaScript中有什么区别"></a>3. Null和Undefined在JavaScript中有什么区别</h2><p>null表示<strong>有意不存在</strong>任何对象值，是一个空值或占位符，通常用于表示对象预期存在但当前为空的情况。</p><p>undefined表示<strong>不存在值或未初始化的变量</strong>，如果一个变量声明了但没有赋值，则它的值为undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="literal">null</span>;  <span class="comment">// 明确表示对象为空</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);  <span class="comment">// 输出: null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> var1;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(var1);  <span class="comment">// 输出: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">noReturn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">noReturn</span>());  <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><h2 id="4-在JavaScript中如何声明对象"><a href="#4-在JavaScript中如何声明对象" class="headerlink" title="4. 在JavaScript中如何声明对象"></a>4. 在JavaScript中如何声明对象</h2><p>在JavaScript中，可以使用var、let或const关键字来声明变量。其中，var声明的变量存在变量提升（Hoisting）现象，let和const声明的变量具有块级作用域（Block Scope)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;  <span class="comment">// 函数作用域</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;  <span class="comment">// 块级作用域</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3</span>;  <span class="comment">// 块级作用域，不可重新赋值</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">4</span>;  <span class="comment">// 会影响外部的a</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">5</span>;  <span class="comment">// 只在这个块内有效</span></span><br><span class="line">    <span class="keyword">const</span> c = <span class="number">6</span>;  <span class="comment">// 只在这个块内有效</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// 输出: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 输出: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);  <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure><h2 id="5-请解释JavaScript中的Hoisting是什么？"><a href="#5-请解释JavaScript中的Hoisting是什么？" class="headerlink" title="5. 请解释JavaScript中的Hoisting是什么？"></a>5. 请解释JavaScript中的Hoisting是什么？</h2><p>Hoisting是JavaScript的一种行为。其中<strong>变量</strong>和<strong>函数</strong>声明在编译阶段被移动到各自范围的顶部。这意味着函数或全局作用域的任何地方声明变量或函数，它们都会被视为在作用域的顶部声明。</p><ol><li>变量提升：<ul><li>使用var声明的变量会被提升到其作用域的顶部</li><li><strong>只有声明被提升，赋值不会被提升</strong></li><li>let和const声明的变量不会被提升</li></ul></li><li>函数提升：<ul><li>函数<strong>声明会被完整地提升到其作用域的顶部</strong></li><li>函数表达式不会被提升</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 输出: undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码等同于：</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数提升</span></span><br><span class="line"><span class="title function_">foo</span>();  <span class="comment">// 这可以正常工作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式不会被提升</span></span><br><span class="line"><span class="title function_">bar</span>();  <span class="comment">// 这会报错</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><strong>函数声明：</strong>是通过使用<code>function</code>关键字后面跟着函数名的方式进行声明，例如：<code>function myFunction() &#123;&#125;</code>。这种方式的函数名可以在函数内部使用该函数名进行递归调用等。函数声明在执行代码之前，JavaScript引擎会将函数声明提升到当前作用域的顶部，因此可以在函数声明之前调用函数。</p><p><strong>函数表达式：</strong>则是将函数赋值给一个变量，这个变量可以是一个匿名函数或具名函数，例如：<code>const myFunction = function() &#123;&#125;</code>或<code>const myFunction = function myFunc() &#123;&#125;</code>。函数表达式可以是匿名函数（没有函数名），或者有一个函数名，但该名称只在函数内部有效，无法在函数外部访问。函数表达式不会被提升，只有在代码执行到定义的地方后才能调用。</p></blockquote><h2 id="6-JavaScript中的this关键字的作用是什么？"><a href="#6-JavaScript中的this关键字的作用是什么？" class="headerlink" title="6. JavaScript中的this关键字的作用是什么？"></a>6. JavaScript中的this关键字的作用是什么？</h2><p>this关键字在JavaScript中用于引用当前对象。<strong>它的值取决于函数的调用方式</strong>，可以是全局对象（在浏览器是Window）、调用函数的对象、新创建的对象（在构造函数中）等。</p><ol><li>全局上下文：<ul><li>在全局执行上下文中，this指向全局对象（浏览器中是window，Node.js中是global）</li></ul></li><li>函数上下文：<ul><li>在普通函数调用中，this指向全局对象</li><li>在方法调用中，this指向调用该方法的对象</li><li>在构造函数中，this指向新创建的对象实例</li></ul></li><li>箭头函数：<ul><li>箭头函数没有自己的this，<mark>它继承自外层作用域的this</mark></li></ul></li><li>显式设置this：<ul><li>可以使用call()、apply()或bind()方法显式设置函数调用时的this值</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 全局上下文</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>);  <span class="comment">// 在浏览器中输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 普通函数调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showThis</span>();  <span class="comment">// 在非严格模式下，输出: window 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 方法调用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>();  <span class="comment">// 输出: Hello, John</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi, I&#x27;m &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">john.<span class="title function_">sayHi</span>();  <span class="comment">// 输出: Hi, I&#x27;m John</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 箭头函数</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">    <span class="attr">greet</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);  <span class="comment">// this不指向obj2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">greetRegular</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);  <span class="comment">// this继承自外层作用域</span></span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj2.<span class="title function_">greet</span>();  <span class="comment">// 在浏览器中输出: Hello, undefined</span></span><br><span class="line">obj2.<span class="title function_">greetRegular</span>();  <span class="comment">// 输出: Hello, Jane</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. call, apply, bind</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">introduce</span>(<span class="params">greeting</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting + <span class="string">&quot;, I&#x27;m &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">introduce.<span class="title function_">call</span>(person1, <span class="string">&quot;Hi&quot;</span>);  <span class="comment">// 输出: Hi, I&#x27;m Alice</span></span><br><span class="line">introduce.<span class="title function_">apply</span>(person2, [<span class="string">&quot;Hello&quot;</span>]);  <span class="comment">// 输出: Hello, I&#x27;m Bob</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> boundIntroduce = introduce.<span class="title function_">bind</span>(person1);</span><br><span class="line"><span class="title function_">boundIntroduce</span>(<span class="string">&quot;Hey&quot;</span>);  <span class="comment">// 输出: Hey, I&#x27;m Alice</span></span><br></pre></td></tr></table></figure><h2 id="7-和-运算符在JavaScript中有什么区别"><a href="#7-和-运算符在JavaScript中有什么区别" class="headerlink" title="7. &#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;运算符在JavaScript中有什么区别"></a>7. &#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;运算符在JavaScript中有什么区别</h2><p>&#x3D;&#x3D; 运算符比较值，允许类型强转换，而&#x3D;&#x3D;&#x3D;运算符<strong>严格比较值和类型</strong>。因此，当使用&#x3D;&#x3D;&#x3D;时，如果两个值的类型和值都相等，则结果为true；而使用&#x3D;&#x3D;时，如果两个值的值相等但类型不同，则会进行类型转换后再比较。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ==</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> == <span class="string">&quot;5&quot;</span>);  <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>);  <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>);  <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ===</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> === <span class="string">&quot;5&quot;</span>);  <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === <span class="literal">false</span>);  <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>);  <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure><h2 id="8-请解释JavaScript中的事件委托（Event-Delegation）是什么？"><a href="#8-请解释JavaScript中的事件委托（Event-Delegation）是什么？" class="headerlink" title="8. 请解释JavaScript中的事件委托（Event Delegation）是什么？"></a>8. 请解释JavaScript中的事件委托（Event Delegation）是什么？</h2><p>事件委托是一种技术，其中父元素处理由子元素触发的事件。通过将事件处理程序添加到父元素上，并检查事件的目标元素，可以优化性能并减少事件侦听器的数量。这通常用于动态添加子元素的场景。</p><ol><li>利用事件冒泡机制</li><li>将事件监听器添加到父元素而不是每个子元素</li><li>可以处理动态添加的元素</li><li>提高性能，尤其是在处理大量子元素时</li><li>减少内存使用和代码复杂度</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>完成作业<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>购物<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>锻炼<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;todo-list&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">className</span> === <span class="string">&#x27;delete&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> li = event.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        li.<span class="title function_">remove</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方法的优势在于，即使我们动态地添加或删除列表项，事件处理也会正常工作，无需额外的代码。同时，它也提高了性能，因为我们只需要一个事件监听器来处理所有的删除操作。</p><h2 id="9-在JavaScript中如何创建一个对象"><a href="#9-在JavaScript中如何创建一个对象" class="headerlink" title="9.在JavaScript中如何创建一个对象"></a>9.在JavaScript中如何创建一个对象</h2><p>在JavaScript中，可以使用对象字面量、构造函数或ECMAScript6中引入的类语法来创建对象。对象字面量是最简单的方法，如<code>var obj = &#123;key:&#39;value&#39;&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 对象字面量</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Object.create()</span></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123; <span class="attr">value</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">writable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123; <span class="attr">value</span>: <span class="number">35</span>, <span class="attr">writable</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. ES6类语法,提供了更接近传统面向对象编程的语法题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj4 = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Dog&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="10-请解释JavaScript中的闭包（Closure-是什么？"><a href="#10-请解释JavaScript中的闭包（Closure-是什么？" class="headerlink" title="10. 请解释JavaScript中的闭包（Closure)是什么？"></a>10. 请解释JavaScript中的闭包（Closure)是什么？</h2><p>闭包是一个函数，即使在外部函数完成执行后，它仍保留从其外部范围访问变量的功能。这是因为在函数执行时，会创建一个执行上下文（Execution Context)，其中包含该函数的变量对象（Variable Object）。当函数执行完毕后，这个上下文不会立即销毁，而是被保留起来，这就是闭包。</p><ol><li>闭包可以访问外部函数的变量，即使外部函数已经返回</li><li>闭包可以用来创建私有变量和方法</li><li>闭包在JavaScript中广泛用于实现数据隐藏和模块化模式</li><li>过度使用闭包可能导致内存占用增加</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params">z</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> closure = <span class="title function_">outerFunction</span>(<span class="number">5</span>);</span><br><span class="line"><span class="title function_">closure</span>(<span class="number">20</span>); <span class="comment">// 输出: 35</span></span><br></pre></td></tr></table></figure><p>在这个例子中，innerFunction形成了一个闭包。它可以访问outerFunction的参数x和局部变量y，即使在outerFunction执行完毕后。当我们调用closure(20)时，它仍然能够访问x和y的值，并与传入的参数z一起进行计算。<br>[执行上下文和作用域链](【【JavaScript】执行上下文和作用域链！】 <a href="https://www.bilibili.com/video/BV1Ym411o7Cs/?share_source=copy_web&vd_source=c5226b5623222d58d700acb3cd12a496">https://www.bilibili.com/video/BV1Ym411o7Cs/?share_source=copy_web&amp;vd_source=c5226b5623222d58d700acb3cd12a496</a>)</p><p><img src="/./../2024/image-20240824181723358.png" alt="image-20240824181723358"></p><p>[视频地址](【【JavaScript】什么是原型】 <a href="https://www.bilibili.com/video/BV1pE421K7cx/?share_source=copy_web&vd_source=c5226b5623222d58d700acb3cd12a496">https://www.bilibili.com/video/BV1pE421K7cx/?share_source=copy_web&amp;vd_source=c5226b5623222d58d700acb3cd12a496</a>)</p><p><img src="/./../2024/image-20240824175940453.png" alt="image-20240824175940453"></p><blockquote><p>要尽量避免闭包的使用</p></blockquote><h2 id="11-请解释JavaScript中的bind-方法有什么用途？"><a href="#11-请解释JavaScript中的bind-方法有什么用途？" class="headerlink" title="11. 请解释JavaScript中的bind()方法有什么用途？"></a>11. 请解释JavaScript中的bind()方法有什么用途？</h2><p>bind()方法用于创建一个新函数，当这个新函数被调用时，bind()的第一个参数将作为它运行时的this，之后的一些列参数将会在传递的实参前传入作为他的参数。这提供了一种方式，使得在函数内部可以使用预定义的this值和其他参数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c + <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">z</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">z</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> newFoo = foo.<span class="title function_">bind</span>(obj, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">newFoo</span>(); <span class="comment">// 输出 12</span></span><br></pre></td></tr></table></figure><h2 id="12-JavaScript中的split-和join-方法有什么区别？"><a href="#12-JavaScript中的split-和join-方法有什么区别？" class="headerlink" title="12. JavaScript中的split()和join()方法有什么区别？"></a>12. JavaScript中的split()和join()方法有什么区别？</h2><p>spilt() 方法用于将一个字符串按照指定的分隔符分割成一个字符串数组。而join()方法则将一个数组（或一个类数组对象）的所有元素通过指定的分隔符连接成一个字符串。</p><ol><li>split()作用于字符串，返回数组</li><li>join()作用于数组，返回字符串</li><li>两者都可以指定分隔符，如果不指定，split()默认以空格为分隔符，join()默认以逗号为分隔符</li><li>split()可以限制返回的数组长度，而join()没有这个功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// split() 示例</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;apple,banana,orange&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> fruits = str.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 输出: [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// join() 示例</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> joinedStr = array.<span class="title function_">join</span>(<span class="string">&quot; and &quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(joinedStr); <span class="comment">// 输出: &quot;apple and banana and orange&quot;</span></span><br></pre></td></tr></table></figure><h2 id="13-JavaScript中的数组方法pop-、push-、unshift-、shift-分别有什么作用？"><a href="#13-JavaScript中的数组方法pop-、push-、unshift-、shift-分别有什么作用？" class="headerlink" title="13. JavaScript中的数组方法pop()、push()、unshift()、shift()分别有什么作用？"></a>13. JavaScript中的数组方法pop()、push()、unshift()、shift()分别有什么作用？</h2><p>pop()方法用于删除数组的最后一个元素并返回该元素的值；</p><p>push()方法用于向数组的末尾添加一个或多个元素，并返回新的长度；</p><p>unshift()方法用于向数组的开头添加一个或多个元素，并返回新的长度；</p><p>shift()方法用于删除数组的第一个元素并返回该元素的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop()</span></span><br><span class="line"><span class="keyword">let</span> lastFruit = fruits.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lastFruit); <span class="comment">// 输出: &#x27;banana&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 输出: [&#x27;apple&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// push()</span></span><br><span class="line"><span class="keyword">let</span> newLength = fruits.<span class="title function_">push</span>(<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newLength); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 输出: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;mango&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unshift()</span></span><br><span class="line">newLength = fruits.<span class="title function_">unshift</span>(<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newLength); <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 输出: [&#x27;grape&#x27;, &#x27;kiwi&#x27;, &#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;mango&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shift()</span></span><br><span class="line"><span class="keyword">let</span> firstFruit = fruits.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstFruit); <span class="comment">// 输出: &#x27;grape&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 输出: [&#x27;kiwi&#x27;, &#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;mango&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="14-如何在JavaScript中处理错误？"><a href="#14-如何在JavaScript中处理错误？" class="headerlink" title="14. 如何在JavaScript中处理错误？"></a>14. 如何在JavaScript中处理错误？</h2><p>在JavaScript中，可以使用try-catch块来捕获和处理异常。try块包含可能会抛出异常的代码，而catch块则包含当异常被抛出时执行的代码。此外，还可以使用throw语句来手动抛出。</p><ol><li>try-catch 用于捕获和处理可能发生的错误</li><li>throw 用于手动抛出异常</li><li>finally 块（可选）无论是否发生异常都会执行</li><li>Error 对象可以用来创建自定义错误</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 手动抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;除数不能为零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 尝试执行可能会抛出异常的代码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">divide</span>(<span class="number">10</span>, <span class="number">2</span>)); <span class="comment">// 正常执行，输出: 5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">divide</span>(<span class="number">10</span>, <span class="number">0</span>)); <span class="comment">// 这行会抛出异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 捕获并处理异常</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;捕获到错误:&quot;</span>, error.<span class="property">message</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 无论是否发生异常，都会执行的代码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;计算结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义错误</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValidationError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(message);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;ValidationError&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationError</span>(<span class="string">&quot;输入无效&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">ValidationError</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;处理验证错误:&quot;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;处理其他类型的错误:&quot;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-请解释JavaScript中的函数提升（Function-Hoisting）和变量提升（Variable-Hoisting）的区别。"><a href="#15-请解释JavaScript中的函数提升（Function-Hoisting）和变量提升（Variable-Hoisting）的区别。" class="headerlink" title="15. 请解释JavaScript中的函数提升（Function Hoisting）和变量提升（Variable Hoisting）的区别。"></a>15. 请解释JavaScript中的函数提升（Function Hoisting）和变量提升（Variable Hoisting）的区别。</h2><ul><li>函数提升： 在JavaScript中，函数声明会被提升到其所在作用域的顶部。这意味着你可以在函数声明之前调用该函数，而不会出错。</li><li>变量提升： 变量提升仅适用于<code>var</code>关键字申明的变量。这些变量会被提升到其所在作用域的顶部，但只会被赋予<code>undefined</code>值。这意味着你可以在变量声明之前引用它，但会得到<code>undefined</code></li></ul><ol><li>函数提升会将<strong>整个函数定义</strong>移到其所在作用域的顶部</li><li>变量提升只会将变量声明移到其所在作用域的顶部，而<strong>不会提升其初始化</strong></li><li>函数提升<strong>优先于</strong>变量提升</li><li>只有<strong>使用function关键字声明的函数</strong>会被提升，函数表达式不会被提升</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量提升示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: undefined（而不是报错）</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码等同于：</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数提升示例</span></span><br><span class="line"><span class="title function_">sayHello</span>(); <span class="comment">// 输出: &quot;Hello!&quot;（不会报错）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式不会被提升</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">sayHi</span>(); <span class="comment">// 抛出错误：sayHi is not a function</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHi = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数提升优先于变量提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> func); <span class="comment">// 输出: &quot;function&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="string">&quot;I am a variable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I am a function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> func); <span class="comment">// 输出: &quot;string&quot;</span></span><br></pre></td></tr></table></figure><h2 id="16-在JavaScript中，如何判断一个变量是数组？"><a href="#16-在JavaScript中，如何判断一个变量是数组？" class="headerlink" title="16. 在JavaScript中，如何判断一个变量是数组？"></a>16. 在JavaScript中，如何判断一个变量是数组？</h2><ul><li>使用<code>Array.isArray()</code> 方法: 这是判断一个变量是否为数组的最佳方法。例如：<code>Array. isArray(myVariable)</code></li><li>使用<code>instanceof</code>运算符：例如：<code>myVariable instanceof Array</code> 。但这种方法在某些情况下可能会出错，尤其是当页面中存在多个<code>Array</code>构造函数时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建测试用的变量</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> object = &#123; <span class="attr">key</span>: <span class="string">&quot;value&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> nullVar = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用 Array.isArray()（推荐方法）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(array));  <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(object)); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 instanceof</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array <span class="keyword">instanceof</span> <span class="title class_">Array</span>);  <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure><h2 id="17-JavaScript中的回调函数（Callback）是什么？请给出一个简单的例子。"><a href="#17-JavaScript中的回调函数（Callback）是什么？请给出一个简单的例子。" class="headerlink" title="17. JavaScript中的回调函数（Callback）是什么？请给出一个简单的例子。"></a>17. JavaScript中的回调函数（Callback）是什么？请给出一个简单的例子。</h2><ul><li><p>回调函数是一个函数，作为参数传递给另一个函数，并在那个函数内部被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接受名字和回调函数作为参数的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name, callback</span>) &#123;</span><br><span class="line">    <span class="comment">// 打印问候语</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span> + name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行作为参数传入的回调函数</span></span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个将被用作回调函数的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayGoodbye</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 打印告别语</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Goodbye!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 greet 函数，传入 &#x27;World&#x27; 作为名字，sayGoodbye 作为回调函数</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;World&#x27;</span>, sayGoodbye);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果将会是：</span></span><br><span class="line"><span class="comment">// 输出：Hello, World</span></span><br><span class="line"><span class="comment">// 输出：Goodbye!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="18-请解释JavaScript中的严格比较（-）和抽象比较（-）的区别。"><a href="#18-请解释JavaScript中的严格比较（-）和抽象比较（-）的区别。" class="headerlink" title="18. 请解释JavaScript中的严格比较（&#x3D;&#x3D;&#x3D;）和抽象比较（&#x3D;&#x3D;）的区别。"></a>18. 请解释JavaScript中的严格比较（&#x3D;&#x3D;&#x3D;）和抽象比较（&#x3D;&#x3D;）的区别。</h2><ul><li>严格比较 &#x3D;&#x3D;&#x3D; : 不仅比较值，还比较它们的类型。如果两个值的类型和值都相同，则返回true。</li><li>抽象比较 &#x3D;&#x3D; ：<strong>在比较前会进行类型转换</strong>， 如果两个值在类型转换后相等，则返回true。</li></ul><h2 id="19-请解释JavaScript中的单线程模型和非阻塞I-O。"><a href="#19-请解释JavaScript中的单线程模型和非阻塞I-O。" class="headerlink" title="19. 请解释JavaScript中的单线程模型和非阻塞I&#x2F;O。"></a>19. 请解释JavaScript中的单线程模型和非阻塞I&#x2F;O。</h2><ul><li>JavaScript在浏览器环境中是单线程的，意味着它一次只能执行一个任务</li><li>为避免阻塞UI， JavaScript采用了非阻塞I&#x2F;O模型，如事件循环和异步编程，<strong>允许在等待I&#x2F;O操作（如网络请求）时执行其他任务</strong>。</li></ul><p>[阻塞I&#x2F;O和非阻塞I&#x2F;O](【阻塞 IO vs 非阻塞 IO (为什么需要 IO 多路复用？)】 <a href="https://www.bilibili.com/video/BV1tN41127un/?share_source=copy_web&vd_source=c5226b5623222d58d700acb3cd12a496">https://www.bilibili.com/video/BV1tN41127un/?share_source=copy_web&amp;vd_source=c5226b5623222d58d700acb3cd12a496</a>)</p><p><img src="/./../2024/image-20240825153309984.png" alt="image-20240825153309984"></p><p><img src="/./../2024/image-20240825153349784.png" alt="image-20240825153349784"></p><p><img src="/./../2024/image-20240825153446653.png" alt="image-20240825153446653"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 异步读取文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;读取文件时发生错误:&#x27;</span>, err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取到的数据:&#x27;</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取是非阻塞的，这里的代码会继续执行。&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>readFile</code>函数会异步地读取文件，而不会阻塞其他代码的执行。当文件读取完成后，会执行传入的回调函数。</p><h2 id="20-请解释JavaScript中的事件循环（Event-Loop）是如何工作的。"><a href="#20-请解释JavaScript中的事件循环（Event-Loop）是如何工作的。" class="headerlink" title="20. 请解释JavaScript中的事件循环（Event Loop）是如何工作的。"></a>20. 请解释JavaScript中的事件循环（Event Loop）是如何工作的。</h2><ul><li>JavaScript的事件循环是一个处理异步事件和回调函数的机制</li><li>当JavaScript代码执行时，它会将同步代码添加到调用栈中并执行。如果遇到异步操作（如setTimeout、网络请求等），则将其添加到任务队列中。</li><li>当调用栈为空时，事件循环会查看任务队列中的第一个任务，并将其添加到调用栈中执行。这个过程会不断重复，形成事件循环。</li></ul><p>【【前端八股文】事件循环-eventloop】 <a href="https://www.bilibili.com/video/BV1j14y1j7us/?share_source=copy_web&vd_source=c5226b5623222d58d700acb3cd12a496">https://www.bilibili.com/video/BV1j14y1j7us/?share_source=copy_web&amp;vd_source=c5226b5623222d58d700acb3cd12a496</a></p><p><img src="/./../2024/image-20240825160048000.png" alt="image-20240825160048000"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// 同步操作，直接执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>); <span class="comment">// 异步操作，放入消息队列</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>); <span class="comment">// 微任务，在当前循环结束时执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>); <span class="comment">// 同步操作，直接执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释：</span></span><br><span class="line"><span class="comment">// 1. 同步代码 &#x27;1&#x27; 和 &#x27;4&#x27; 立即执行</span></span><br><span class="line"><span class="comment">// 2. setTimeout 回调被放入宏任务队列</span></span><br><span class="line"><span class="comment">// 3. Promise 回调被放入微任务队列</span></span><br><span class="line"><span class="comment">// 4. 同步代码执行完毕后，检查微任务队列并执行 &#x27;3&#x27;</span></span><br><span class="line"><span class="comment">// 5. 本轮事件循环结束，开始下一轮，执行宏任务队列中的 &#x27;2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="21-请解释JavaScript中的闭包（Closure-并给出一个例子。"><a href="#21-请解释JavaScript中的闭包（Closure-并给出一个例子。" class="headerlink" title="21. 请解释JavaScript中的闭包（Closure)并给出一个例子。"></a>21. 请解释JavaScript中的闭包（Closure)并给出一个例子。</h2><p>闭包是一个有权访问其外部词法环境（lexical environment）函数。即使外部函数已经执行完毕，闭包仍然可以访问其外部函数的变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params">outerVariable</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVariable); <span class="comment">//任然可以访问outerVariable</span></span><br><span class="line">    &#125;；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myInnerFunction = <span class="title function_">outerFunction</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line"><span class="title function_">myInnerFunction</span>();<span class="comment">//输出Hello world!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="22-请解释JavaScript中的原型链（Prototype-Chain）是什么。"><a href="#22-请解释JavaScript中的原型链（Prototype-Chain）是什么。" class="headerlink" title="22. 请解释JavaScript中的原型链（Prototype Chain）是什么。"></a>22. 请解释JavaScript中的原型链（Prototype Chain）是什么。</h2><p>【【前端八股文】原型和原型链】 <a href="https://www.bilibili.com/video/BV1LY411d7Yt/?share_source=copy_web&vd_source=c5226b5623222d58d700acb3cd12a496">https://www.bilibili.com/video/BV1LY411d7Yt/?share_source=copy_web&amp;vd_source=c5226b5623222d58d700acb3cd12a496</a></p><p><img src="/./../2024/image-20240825161309064.png" alt="image-20240825161309064"></p><p><img src="/./../2024/image-20240825162110327.png" alt="image-20240825162110327"></p><p><img src="/./../2024/image-20240825162146272.png" alt="image-20240825162146272"></p><h2 id="23-请解释JavaScript中的-this-关键字在箭头函数和普通函数中的不同。"><a href="#23-请解释JavaScript中的-this-关键字在箭头函数和普通函数中的不同。" class="headerlink" title="23. 请解释JavaScript中的 this 关键字在箭头函数和普通函数中的不同。"></a>23. 请解释JavaScript中的 this 关键字在箭头函数和普通函数中的不同。</h2><ul><li>在普通函数中，this的值取决于函数的调用方式。它可以指向全局对象（在浏览器中的window)、调用函数的对象、新创建的对象（在构造函数中）等</li><li>在箭头函数中，this不绑定自己的this, 而是捕获其所在上下文的this值作为自己的this值。这使得箭头函数在回调函数和事件处理器中特别有用，因为它们不会意外地改变this的值。</li></ul><ol><li>在普通函数中，this 的值取决于函数的调用方式</li><li>在箭头函数中，this 被词法绑定，继承自外围作用域</li><li>箭头函数不会创建自己的 this，它会捕获其所在上下文的 this 值</li><li>由于这个特性，箭头函数通常不适用于方法函数，但在回调中很有用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/08/21/hello-world/"/>
      <url>/2024/08/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
